new_row_end$sleep_start_day[p,]
new_row_end$sleep_start_day
new_row_end$sleep_end = as.POSIXct( paste0(new_row_end$sleep_start_day, " ", format("23:59", "%H:%M")), format = "%m/%d/%Y %H:%M")
new_row_end$sleep_end = as.POSIXct( paste0(new_row_end$sleep_start_day, " ", "23:59"), format = "%m/%d/%Y %H:%M")
new_row_end$sleep_end
for (p in period){
new_row_end = sleep_data[p, ]
new_row_end$sleep_end = as.POSIXct( paste0(new_row_end$sleep_start_day, " ", "23:59"), format = "%m/%d/%Y %H:%M")
new_row_start = sleep_data[p, ]
new_row_start$sleep_start = as.POSIXct( paste0(new_row_end$sleep_end_day, " ", "00:00"), format = "%m/%d/%Y %H:%M")
sleep_data = rbind(sleep_data,
new_row_end,
new_row_start)
}
period
for (p in periods){
new_row_end = sleep_data[p, ]
new_row_end$sleep_end = as.POSIXct( paste0(new_row_end$sleep_start_day, " ", "23:59"), format = "%m/%d/%Y %H:%M")
new_row_start = sleep_data[p, ]
new_row_start$sleep_start = as.POSIXct( paste0(new_row_end$sleep_end_day, " ", "00:00"), format = "%m/%d/%Y %H:%M")
sleep_data = rbind(sleep_data,
new_row_end,
new_row_start)
}
sleep_data = sleep_data %>%
arrange(sleep_start)
View(sleep_data)
sleep_data <- audrey_raw %>% filter(Event  %in% c( "Sleep", "Sleeping"))
library(dplyr)
library(lubridate)
# Step 1: Create the sleep_start column with the specified format
sleep_data <- sleep_data %>%
mutate(sleep_start = format(DateTime, "%m/%d/%Y %H:%M"))
sleep_data <- sleep_data %>%
mutate(sleep_start_day = format(DateTime, "%m/%d/%Y"))
sleep_data <- sleep_data %>%
mutate(sleep_end_temp = as.POSIXct(Event.Type, format = "%H:%M"))
sleep_data <- sleep_data %>%
mutate(
sleep_end_day = ifelse(
format(sleep_end_temp, "%H:%M") < format(DateTime, "%H:%M"),
format(as.Date(format(DateTime, "%Y-%m-%d")) + 1, "%m/%d/%Y"),  # Add 1 day
format(as.Date(format(DateTime, "%Y-%m-%d")), "%m/%d/%Y")       # Keep the same day
)
)
sleep_data <- sleep_data %>%
mutate(sleep_end = as.POSIXct(
paste0(sleep_end_day, " ", format(sleep_data$sleep_end_temp, "%H:%M")),
format = "%m/%d/%Y %H:%M"
))
#### create new start times for sleep periods overlapping several days
periods <- which(sleep_data$sleep_end_day >  format(sleep_data$DateTime,
format = "%m/%d/%Y"))
subset = sleep_data %>% select(sleep_start, Event.Type, sleep_end_temp, sleep_end_day)
subset[periods,]
for (p in periods){
new_row_start = sleep_data[p, ]
sleep_data$sleep_end[p] = as.POSIXct( paste0(new_row_end$sleep_start_day, " ", "23:59"), format = "%m/%d/%Y %H:%M")
new_row_start$sleep_start = as.POSIXct( paste0(new_row_end$sleep_end_day, " ", "00:00"), format = "%m/%d/%Y %H:%M")
sleep_data = rbind(sleep_data,
new_row_start)
}
sleep_data = sleep_data %>%
arrange(sleep_start)
View(sleep_data)
subset = sleep_data %>% select(sleep_start, Event.Type, sleep_end_temp, sleep_end_day)
subset
# Step 1: Create the sleep_start column with the specified format
sleep_data <- sleep_data %>%
mutate(sleep_start = format(DateTime, "%m/%d/%Y %H:%M"))
sleep_data <- sleep_data %>%
mutate(sleep_start_day = format(DateTime, "%m/%d/%Y"))
sleep_data <- sleep_data %>%
mutate(sleep_end_temp = as.POSIXct(Event.Type, format = "%H:%M"))
sleep_data <- sleep_data %>%
mutate(
sleep_end_day = ifelse(
format(sleep_end_temp, "%H:%M") < format(DateTime, "%H:%M"),
format(as.Date(format(DateTime, "%Y-%m-%d")) + 1, "%m/%d/%Y"),  # Add 1 day
format(as.Date(format(DateTime, "%Y-%m-%d")), "%m/%d/%Y")       # Keep the same day
)
)
sleep_data <- sleep_data %>%
mutate(sleep_end = as.POSIXct(
paste0(sleep_end_day, " ", format(sleep_data$sleep_end_temp, "%H:%M")),
format = "%m/%d/%Y %H:%M"
))
#### create new start times for sleep periods overlapping several days
periods <- which(sleep_data$sleep_end_day >  format(sleep_data$DateTime,
format = "%m/%d/%Y"))
subset = sleep_data %>% select(sleep_start, Event.Type, sleep_end_temp, sleep_end_day)
subset[periods,]
periods
subset[periods,]
subset[periods,]
p=5
new_row_start = sleep_data[p, ]
new_row_start
as.POSIXct( paste0(sleep_data$sleep_start_day,[p] " ", "23:59"), format = "%m/%d/%Y %H:%M")
as.POSIXct( paste0(sleep_data$sleep_start_day[p], " ", "23:59"), format = "%m/%d/%Y %H:%M")
sleep_data$sleep_end_day[p]
as.POSIXct( paste0(sleep_data$sleep_end_day[p], " ", "00:00"), format = "%m/%d/%Y %H:%M")
as.POSIXct( paste0(sleep_data$sleep_end_day[p], " ", "00:01"), format = "%m/%d/%Y %H:%M")
for (p in periods){
new_row_start = sleep_data[p, ]
sleep_data$sleep_end[p] = as.POSIXct( paste0(sleep_data$sleep_start_day[p], " ", "23:59"), format = "%m/%d/%Y %H:%M")
new_row_start$sleep_start = as.POSIXct( paste0(sleep_data$sleep_end_day[p], " ", "00:01"), format = "%m/%d/%Y %H:%M")
sleep_data = rbind(sleep_data,
new_row_start)
}
sleep_data = sleep_data %>%
arrange(sleep_start)
subset = sleep_data %>% select(sleep_start, Event.Type, sleep_end_temp, sleep_end_day)
print(subset[periods,])
s
subset = sleep_data %>% select(sleep_start, Event.Type, sleep_end_temp, sleep_end_day)
subset
# Step 1: Create the sleep_start column with the specified format
sleep_data <- sleep_data %>%
mutate(sleep_start = format(DateTime, "%m/%d/%Y %H:%M"))
sleep_data <- sleep_data %>%
mutate(sleep_start_day = format(DateTime, "%m/%d/%Y"))
sleep_data <- sleep_data %>%
mutate(sleep_end_temp = as.POSIXct(Event.Type, format = "%H:%M"))
sleep_data <- sleep_data %>%
mutate(
sleep_end_day = ifelse(
format(sleep_end_temp, "%H:%M") < format(DateTime, "%H:%M"),
format(as.Date(format(DateTime, "%Y-%m-%d")) + 1, "%m/%d/%Y"),  # Add 1 day
format(as.Date(format(DateTime, "%Y-%m-%d")), "%m/%d/%Y")       # Keep the same day
)
)
#### create new start times for sleep periods overlapping several days
periods <- which(sleep_data$sleep_end_day >  format(sleep_data$DateTime,
format = "%m/%d/%Y"))
subset = sleep_data %>% select(sleep_start, Event.Type, sleep_end_temp, sleep_end_day)
print(subset[periods,])
#### create new start times for sleep periods overlapping several days
# Identify the periods where sleep_end_day is greater than DateTime
periods <- which(sleep_data$sleep_end_day > format(sleep_data$DateTime, format = "%m/%d/%Y"))
periods
sleep_data <- audrey_raw %>% filter(Event  %in% c( "Sleep", "Sleeping"))
library(dplyr)
library(lubridate)
# Step 1: Create the sleep_start column with the specified format
sleep_data <- sleep_data %>%
mutate(sleep_start = format(DateTime, "%m/%d/%Y %H:%M"))
sleep_data <- sleep_data %>%
mutate(sleep_start_day = format(DateTime, "%m/%d/%Y"))
sleep_data <- sleep_data %>%
mutate(sleep_end_temp = as.POSIXct(Event.Type, format = "%H:%M"))
sleep_data <- sleep_data %>%
mutate(
sleep_end_day = ifelse(
format(sleep_end_temp, "%H:%M") < format(DateTime, "%H:%M"),
format(as.Date(format(DateTime, "%Y-%m-%d")) + 1, "%m/%d/%Y"),  # Add 1 day
format(as.Date(format(DateTime, "%Y-%m-%d")), "%m/%d/%Y")       # Keep the same day
)
)
sleep_data <- sleep_data %>%
mutate(sleep_end = as.POSIXct(
paste0(sleep_end_day, " ", format(sleep_data$sleep_end_temp, "%H:%M")),
format = "%m/%d/%Y %H:%M"
))
#### create new start times for sleep periods overlapping several days
# Identify the periods where sleep_end_day is greater than DateTime
periods <- which(sleep_data$sleep_end_day > format(sleep_data$DateTime, format = "%m/%d/%Y"))
periods
# Initialize a list to store new rows
new_rows <- list()
# Iterate over the periods
for (p in periods) {
new_row_start <- sleep_data[p, ]
# Set the sleep_end time to "23:59" of the sleep_start_day
sleep_data$sleep_end[p] <- as.POSIXct(
paste0(sleep_data$sleep_start_day[p], " 23:59"),
format = "%m/%d/%Y %H:%M"
)
# Set the new_row_start's sleep_start time to "00:01" of the sleep_end_day
new_row_start$sleep_start <- as.POSIXct(
paste0(sleep_data$sleep_end_day[p], " 00:01"),
format = "%m/%d/%Y %H:%M"
)
# Append the new row to the list
new_rows[[length(new_rows) + 1]] <- new_row_start
}
# Bind all new rows to the original data frame
if (length(new_rows) > 0) {
sleep_data <- rbind(sleep_data, do.call(rbind, new_rows))
}
# Print the updated data frame
print(sleep_data)
sleep_data = sleep_data %>%
arrange(sleep_start)
subset = sleep_data %>% select(sleep_start, Event.Type, sleep_end_temp, sleep_end_day)
subset
new_rows
subset = sleep_data %>% select(sleep_start, sleep_end)
subset
subset[periods,]
sleep_data <- audrey_raw %>% filter(Event  %in% c( "Sleep", "Sleeping"))
library(dplyr)
library(lubridate)
# Step 1: Create the sleep_start column with the specified format
sleep_data <- sleep_data %>%
mutate(sleep_start = format(DateTime, "%m/%d/%Y %H:%M"))
sleep_data <- sleep_data %>%
mutate(sleep_start_day = format(DateTime, "%m/%d/%Y"))
sleep_data <- sleep_data %>%
mutate(sleep_end_temp = as.POSIXct(Event.Type, format = "%H:%M"))
sleep_data <- sleep_data %>%
mutate(
sleep_end_day = ifelse(
format(sleep_end_temp, "%H:%M") < format(DateTime, "%H:%M"),
format(as.Date(format(DateTime, "%Y-%m-%d")) + 1, "%m/%d/%Y"),  # Add 1 day
format(as.Date(format(DateTime, "%Y-%m-%d")), "%m/%d/%Y")       # Keep the same day
)
)
sleep_data <- sleep_data %>%
mutate(sleep_end = as.POSIXct(
paste0(sleep_end_day, " ", format(sleep_data$sleep_end_temp, "%H:%M")),
format = "%m/%d/%Y %H:%M"
))
#### create new start times for sleep periods overlapping several days
# Identify the periods where sleep_end_day is greater than DateTime
periods <- which(sleep_data$sleep_end_day > format(sleep_data$DateTime, format = "%m/%d/%Y"))
# Initialize a list to store new rows
new_rows <- list()
dim(periods)
dim(sleep_data)
periods
# Iterate over the periods
for (p in periods) {
new_row_start <- sleep_data[p, ]
# Set the sleep_end time to "23:59" of the sleep_start_day
sleep_data$sleep_end[p] <- as.POSIXct(
paste0(sleep_data$sleep_start_day[p], " 23:59"),
format = "%m/%d/%Y %H:%M"
)
# Set the new_row_start's sleep_start time to "00:01" of the sleep_end_day
new_row_start$sleep_start <- as.POSIXct(
paste0(sleep_data$sleep_end_day[p], " 00:01"),
format = "%m/%d/%Y %H:%M"
)
# Append the new row to the list
new_rows[[length(new_rows) + 1]] <- new_row_start
}
new_row_start
new_row_start$sleep_start
new_row_start$sleep_end
new_rows
as. do.call(rbind, new_rows)
do.call(rbind, new_rows)
# Bind all new rows to the original data frame
new_rows =  do.call(rbind, new_rows)
new_rows
new_rows$Day
row.names(new_rows)
rbind(sleep_data, new_rows)
rbind(sleep_data, new_rows)[90:100]
rbind(sleep_data, new_rows)[90:100,]
sleep_data$sleep_start <- as.POSIXct(sleep_data$sleep_start, format = "%m/%d/%Y %H:%M", tz = "CST6CDT")
sleep_data$sleep_start
rbind(sleep_data, do.call(rbind, new_rows))
new_rows
dim(new_rows)
dim(sleep_data)
rbind(sleep_data, new_rows)
rbind(sleep_data, new_rows)[90:100,]
if (length(new_rows) > 0) {
sleep_data <- rbind(sleep_data, new_rows)
}
# Print the updated data frame
print(sleep_data)
sleep_data = sleep_data %>%
arrange(sleep_start)
subset = sleep_data %>% select(sleep_start, sleep_end)
subset
# Plotting using ggplot
ggplot(sleep_data, aes(x = sleep_start_day)) +
geom_rect(aes(
xmin = sleep_start_day,
xmax = sleep_start_day + days(1),
ymin = sleep_start_hour,
ymax = sleep_end_hour),
fill = "darkblue", alpha = 0.6) +
scale_x_date(date_labels = "%m/%d/%Y", date_breaks = "1 day") +
scale_y_continuous(breaks = seq(0, 24, by = 1),
labels = function(x) sprintf("%02d:00", x %% 24)) +
labs(x = "Date", y = "Time (Hour:Minute)", title = "Sleep Periods by Date") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Plotting using ggplot
ggplot(sleep_data, aes(x = )) +
geom_rect(aes(
xmin = format(sleep_start,  "%m/%d/%Y"),
xmax = format(sleep_end,  "%m/%d/%Y") + days(1),
ymin =  format(sleep_start,  "%H:%M"),
ymax = format(sleep_end,  "%H:%M")),
fill = "darkblue", alpha = 0.6) +
scale_x_date(date_labels = "%m/%d/%Y", date_breaks = "1 day") +
scale_y_continuous(breaks = seq(0, 24, by = 1),
labels = function(x) sprintf("%02d:00", x %% 24)) +
labs(x = "Date", y = "Time (Hour:Minute)", title = "Sleep Periods by Date") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
format(sleep_data$sleep_start[1],  "%m/%d/%Y")
format(sleep_data$sleep_start[1],  "%m/%d/%Y") + days(1)
# Plotting using ggplot
ggplot(sleep_data, aes(x = )) +
geom_rect(aes(
xmin = format(sleep_start,  "%m/%d/%Y"),
xmax = format(as.Date(format(sleep_start, "%Y-%m-%d")) + 1, "%m/%d/%Y"),,
ymin =  format(sleep_start,  "%H:%M"),
ymax = format(sleep_end,  "%H:%M")),
fill = "darkblue", alpha = 0.6) +
scale_x_date(date_labels = "%m/%d/%Y", date_breaks = "1 day") +
scale_y_continuous(breaks = seq(0, 24, by = 1),
labels = function(x) sprintf("%02d:00", x %% 24)) +
labs(x = "Date", y = "Time (Hour:Minute)", title = "Sleep Periods by Date") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
format(as.Date(format(sleep_data$sleep_start[1], "%Y-%m-%d")) + 1, "%m/%d/%Y")
# Plotting using ggplot
ggplot(sleep_data, aes(x = )) +
geom_rect(aes(
xmin = format(sleep_start,  "%m/%d/%Y"),
xmax = format(as.Date(format(sleep_start, "%Y-%m-%d")) + 1, "%m/%d/%Y"),
ymin =  format(sleep_start,  "%H:%M"),
ymax = format(sleep_end,  "%H:%M")),
fill = "darkblue", alpha = 0.6) +
#scale_x_date(date_labels = "%m/%d/%Y", date_breaks = "1 day") +
scale_y_continuous(breaks = seq(0, 24, by = 1),
labels = function(x) sprintf("%02d:00", x %% 24)) +
labs(x = "Date", y = "Time (Hour:Minute)", title = "Sleep Periods by Date") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
format(sleep_data$sleep_start,  "%H:%M")
library(ggplot2)
# Convert time to numeric hours since midnight for ymin and ymax
sleep_data$start_hour <- as.numeric(format(sleep_data$sleep_start, "%H")) + as.numeric(format(sleep_data$sleep_start, "%M")) / 60
sleep_data$end_hour <- as.numeric(format(sleep_data$sleep_end, "%H")) + as.numeric(format(sleep_data$sleep_end, "%M")) / 60
# Plotting using ggplot
ggplot(sleep_data) +
geom_rect(aes(
xmin = as.Date(sleep_start),
xmax = as.Date(sleep_start) + 1,
ymin = start_hour,
ymax = end_hour),
fill = "darkblue", alpha = 0.6) +
scale_x_date(date_labels = "%m/%d/%Y", date_breaks = "1 day") +
scale_y_continuous(breaks = seq(0, 24, by = 1),
labels = function(x) sprintf("%02d:00", x %% 24)) +
labs(x = "Date", y = "Time (Hour:Minute)", title = "Sleep Periods by Date") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Plotting using ggplot
ggplot(sleep_data) +
geom_rect(aes(
xmin = as.Date(sleep_start),
xmax = as.Date(sleep_start) + 1,
ymin = start_hour,
ymax = end_hour),
fill = "darkblue", alpha = 0.6) +
scale_x_date(date_labels = "%m/%d/%Y", date_breaks = "1 day") +
scale_y_continuous(breaks = seq(0, 24, by = 1),
labels = function(x) sprintf("%02d:00", x %% 24)) +
labs(x = "Date", y = "Time (Hour:Minute)", title = "Sleep Periods by Date") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Handle missing sleep_end values
which(is.na(sleep_data$Event.Type)==TRUE)
# Handle missing sleep_end values
which(is.na(sleep_data$Event.Time)==TRUE)
sleep_data
sleep_data <- audrey_raw %>% filter(Event  %in% c( "Sleep", "Sleeping"))
View(sleep_data)
library(dplyr)
library(lubridate)
# Step 1: Create the sleep_start column with the specified format
sleep_data <- sleep_data %>%
mutate(sleep_start = format(DateTime, "%m/%d/%Y %H:%M"))
sleep_data <- sleep_data %>%
mutate(sleep_start_day = format(DateTime, "%m/%d/%Y"))
# Handle missing sleep_end values
which(is.na(sleep_data$Event.Type)==TRUE)
sleep_data$Event.Type
# Handle missing sleep_end values
which(sleep_data$Event.Type == "")
sleep_data = sleep_data %>%
arrange(sleep_start)
# Handle missing sleep_end values
missing = which(sleep_data$Event.Type == "")
m=4
sleep_data$sleep_start[m]
sleep_data$sleep_start[m+1]
sleep_data$sleep_start[m+1]-sleep_data$sleep_start[m]
sleep_data$sleep_start[m + 1]
as.POSIXct(sleep_data$sleep_start[m+1])
as.POSIXct(sleep_data$sleep_start[m+1], "%m/%d/%Y %H:%M")
sleep_data$sleep_start[m+1]
as.POSIXct(sleep_data$sleep_start[m+1])
sleep_data$sleep_start[m]
sleep_data$sleep_start[m+1]-sleep_data$sleep_start[m]
as.numeric(difftime(sleep_data$sleep_start[m+1], sleep_data$sleep_start[m], units = "secs"))
difftime(sleep_data$sleep_start[m+1], sleep_data$sleep_start[m], units = "secs")
sleep_data$sleep_start[1]
# Convert sleep_start to POSIXct
sleep_data$sleep_start <- as.POSIXct(sleep_data$sleep_start, format = "%m/%d/%Y %H:%M")
sleep_data <- sleep_data %>%
mutate(sleep_start_day = format(DateTime, "%m/%d/%Y"))
sleep_data$sleep_start
sleep_data$sleep_start_day
sleep_data = sleep_data %>%
arrange(sleep_start)
# Handle missing sleep_end values
missing = which(sleep_data$Event.Type == "")
sleep_data$sleep_start[m+1]-sleep_data$sleep_start[m]
difftime(sleep_data$sleep_start[m+1], sleep_data$sleep_start[m], units = "secs")
difftime(sleep_data$sleep_start[m+1], sleep_data$sleep_start[m], units = "min")
difftime(sleep_data$sleep_start[m+1], sleep_data$sleep_start[m], units = "min")
diff = difftime(sleep_data$sleep_start[m+1], sleep_data$sleep_start[m], units = "min")
diff
sleep_data$sleep_start[m] + diff
sleep_data$sleep_start[m]
diff/2
# Handle missing sleep_end values
missing = which(sleep_data$Event.Type == "")
for (m in missing){
diff = difftime(sleep_data$sleep_start[m+1], sleep_data$sleep_start[m], units = "min")
sleep_data$Event.Type[m] = sleep_data$sleep_start[m] + diff/2
}
sleep_data <- sleep_data %>%
mutate(sleep_end_temp = as.POSIXct(Event.Type, format = "%H:%M"))
sleep_data <- sleep_data %>%
mutate(
sleep_end_day = ifelse(
format(sleep_end_temp, "%H:%M") < format(DateTime, "%H:%M"),
format(as.Date(format(DateTime, "%Y-%m-%d")) + 1, "%m/%d/%Y"),  # Add 1 day
format(as.Date(format(DateTime, "%Y-%m-%d")), "%m/%d/%Y")       # Keep the same day
)
)
sleep_data <- sleep_data %>%
mutate(sleep_end = as.POSIXct(
paste0(sleep_end_day, " ", format(sleep_data$sleep_end_temp, "%H:%M")),
format = "%m/%d/%Y %H:%M"
))
#### create new start times for sleep periods overlapping several days
# Identify the periods where sleep_end_day is greater than DateTime
periods <- which(sleep_data$sleep_end_day > format(sleep_data$DateTime, format = "%m/%d/%Y"))
# Initialize a list to store new rows
new_rows <- list()
# Iterate over the periods
for (p in periods) {
new_row_start <- sleep_data[p, ]
# Set the sleep_end time to "23:59" of the sleep_start_day
sleep_data$sleep_end[p] <- as.POSIXct(
paste0(sleep_data$sleep_start_day[p], " 23:59"),
format = "%m/%d/%Y %H:%M"
)
# Set the new_row_start's sleep_start time to "00:01" of the sleep_end_day
new_row_start$sleep_start <- as.POSIXct(
paste0(sleep_data$sleep_end_day[p], " 00:01"),
format = "%m/%d/%Y %H:%M"
)
# Append the new row to the list
new_rows[[length(new_rows) + 1]] <- new_row_start
}
# Bind all new rows to the original data frame
new_rows =  do.call(rbind, new_rows)
row.names(new_rows)
sleep_data$sleep_start <- as.POSIXct(sleep_data$sleep_start, format = "%m/%d/%Y %H:%M", tz = "CST6CDT")
if (length(new_rows) > 0) {
sleep_data <- rbind(sleep_data, new_rows)
}
# Print the updated data frame
print(sleep_data)
sleep_data = sleep_data %>%
arrange(sleep_start)
subset = sleep_data %>% select(sleep_start, sleep_end)
library(ggplot2)
# Convert time to numeric hours since midnight for ymin and ymax
sleep_data$start_hour <- as.numeric(format(sleep_data$sleep_start, "%H")) + as.numeric(format(sleep_data$sleep_start, "%M")) / 60
sleep_data$end_hour <- as.numeric(format(sleep_data$sleep_end, "%H")) + as.numeric(format(sleep_data$sleep_end, "%M")) / 60
# Plotting using ggplot
ggplot(sleep_data) +
geom_rect(aes(
xmin = as.Date(sleep_start),
xmax = as.Date(sleep_start) + 1,
ymin = start_hour,
ymax = end_hour),
fill = "darkblue", alpha = 0.6) +
scale_x_date(date_labels = "%m/%d/%Y", date_breaks = "1 day") +
scale_y_continuous(breaks = seq(0, 24, by = 1),
labels = function(x) sprintf("%02d:00", x %% 24)) +
labs(x = "Date", y = "Time (Hour:Minute)", title = "Sleep Periods by Date") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Plotting using ggplot
ggplot(sleep_data) +
geom_rect(aes(
xmin = as.Date(sleep_start),
xmax = as.Date(sleep_start) + 1,
ymin = start_hour,
ymax = end_hour),
fill = "darkblue", alpha = 0.6) +
scale_x_date(date_labels = "%m/%d/%Y", date_breaks = "1 day") +
scale_y_continuous(breaks = seq(0, 24, by = 1),
labels = function(x) sprintf("%02d:00", x %% 24)) +
labs(x = "Date", y = "Time (Hour:Minute)", title = "Sleep Periods by Date") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
