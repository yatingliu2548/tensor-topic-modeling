data[,16]
sum(data[,16])
set.seed(123)
D=t(rdiric(2,rep(0.8,50)))
data=matrix(0,50,300)
data[,1:15]=matrix(rep(D[,1],times=15),nrow=50)
data[,16:30]=matrix(rep(D[,2],times=15),nrow=50)
data[,31:60]=data[,1:30]
data[,61:90]=data[,1:30]
data[,91:120]=data[,1:30]
data[,121:150]=data[,1:30]
data[,151:300]=data[,1:150]
before=rdiric(1,rep(0.8,50))#rdiric(1,rep(0.5,25))*sum(data[1:25,1])
before2=rdiric(1,rep(0.5,25))*sum(data[1:25,16])
data[1:25,16:30]=matrix(rep(before2,times=15),nrow=25)
#data[,16:30]=matrix(rep(before,times=15),nrow=50)
data[,31:60]=data[,1:30]
data[,61:90]=data[,1:30]
data[,91:120]=data[,1:30]
data[,121:150]=data[,1:30]
data1=data
tensor1=array(t(data1),dim=c(30,10,50))
plot_slice(tensor1,2,"class","mode",option="viridis",limits=c(0,0.1))
data[,11:20]=data[,1:10]*0.5+data[,21:30]*0.5
data[,31:60]=data[,1:30]
data[,61:90]=data[,1:30]
data[,91:120]=data[,1:30]
data[,121:150]=data[,1:30]
data[,161:170]=data[,151:160]*0.5+data[,171:180]*0.5
data[,181:210]=data[,151:180]
data[,211:240]=data[,151:180]
data[,241:270]=data[,151:180]
data[,271:300]=data[,151:180]
set.seed(123)
D=t(rdiric(2,rep(0.8,50)))
data=matrix(0,50,300)
data[,1:15]=matrix(rep(D[,1],times=15),nrow=50)
data[,16:30]=matrix(rep(D[,2],times=15),nrow=50)
data[,31:60]=data[,1:30]
data[,61:90]=data[,1:30]
data[,91:120]=data[,1:30]
data[,121:150]=data[,1:30]
data[,151:300]=data[,1:150]
before=rdiric(1,rep(0.8,50))#rdiric(1,rep(0.5,25))*sum(data[1:25,1])
data1=data
tensor1=array(t(data1),dim=c(30,10,50))
plot_slice(tensor1,2,"class","mode",option="viridis",limits=c(0,0.1))
data[,11:20]=data[,1:10]*0.5+data[,21:30]*0.5
data[,31:60]=data[,1:30]
data[,61:90]=data[,1:30]
data[,91:120]=data[,1:30]
data[,121:150]=data[,1:30]
set.seed(123)
D=t(rdiric(2,rep(0.8,50)))
data=matrix(0,50,300)
data[,1:15]=matrix(rep(D[,1],times=15),nrow=50)
data[,16:30]=matrix(rep(D[,2],times=15),nrow=50)
data[,31:60]=data[,1:30]
data[,61:90]=data[,1:30]
data[,91:120]=data[,1:30]
data[,121:150]=data[,1:30]
data[,151:300]=data[,1:150]
before=rdiric(1,rep(0.8,50))#rdiric(1,rep(0.5,25))*sum(data[1:25,1])
#data[1:25,16:30]=matrix(rep(before2,times=15),nrow=25)
data[,16:30]=matrix(rep(before,times=15),nrow=50)
data[,31:60]=data[,1:30]
data[,61:90]=data[,1:30]
data[,91:120]=data[,1:30]
data[,121:150]=data[,1:30]
data1=data
tensor1=array(t(data1),dim=c(30,10,50))
plot_slice(tensor1,2,"class","mode",option="viridis",limits=c(0,0.1))
data[,11:20]=data[,1:10]*0.5+data[,21:30]*0.5
data[,31:60]=data[,1:30]
data[,61:90]=data[,1:30]
data[,91:120]=data[,1:30]
data[,121:150]=data[,1:30]
data[,161:170]=data[,151:160]*0.5+data[,171:180]*0.5
data[,181:210]=data[,151:180]
data[,211:240]=data[,151:180]
data[,241:270]=data[,151:180]
data[,271:300]=data[,151:180]
tensor_true=array(t(data),dim=c(30,10,50))
Y_true=as.tensor(tensor_true)
plot_slice(tensor_true,2,"Mode 1","Mode 3",option="viridis",limits=c(0,0.1))
set.seed(1234)
D=t(rdiric(2,rep(0.8,50)))
data=matrix(0,50,300)
data[,1:15]=matrix(rep(D[,1],times=15),nrow=50)
data[,16:30]=matrix(rep(D[,2],times=15),nrow=50)
data[,31:60]=data[,1:30]
data[,61:90]=data[,1:30]
data[,91:120]=data[,1:30]
data[,121:150]=data[,1:30]
data[,151:300]=data[,1:150]
before=rdiric(1,rep(0.8,50))#rdiric(1,rep(0.5,25))*sum(data[1:25,1])
#data[1:25,16:30]=matrix(rep(before2,times=15),nrow=25)
data[,16:30]=matrix(rep(before,times=15),nrow=50)
data[,31:60]=data[,1:30]
data[,61:90]=data[,1:30]
data[,91:120]=data[,1:30]
data[,121:150]=data[,1:30]
data1=data
tensor1=array(t(data1),dim=c(30,10,50))
plot_slice(tensor1,2,"class","mode",option="viridis",limits=c(0,0.1))
data[,11:20]=data[,1:10]*0.5+data[,21:30]*0.5
data[,31:60]=data[,1:30]
data[,61:90]=data[,1:30]
data[,91:120]=data[,1:30]
data[,121:150]=data[,1:30]
data[,161:170]=data[,151:160]*0.5+data[,171:180]*0.5
data[,181:210]=data[,151:180]
data[,211:240]=data[,151:180]
data[,241:270]=data[,151:180]
data[,271:300]=data[,151:180]
tensor_true=array(t(data),dim=c(30,10,50))
Y_true=as.tensor(tensor_true)
plot_slice(tensor_true,2,"Mode 1","Mode 3",option="viridis",limits=c(0,0.1))
set.seed(1)
D=t(rdiric(2,rep(0.8,50)))
data=matrix(0,50,300)
data[,1:15]=matrix(rep(D[,1],times=15),nrow=50)
data[,16:30]=matrix(rep(D[,2],times=15),nrow=50)
data[,31:60]=data[,1:30]
data[,61:90]=data[,1:30]
data[,91:120]=data[,1:30]
data[,121:150]=data[,1:30]
data[,151:300]=data[,1:150]
before=rdiric(1,rep(0.8,50))#rdiric(1,rep(0.5,25))*sum(data[1:25,1])
#data[1:25,16:30]=matrix(rep(before2,times=15),nrow=25)
data[,16:30]=matrix(rep(before,times=15),nrow=50)
data[,31:60]=data[,1:30]
data[,61:90]=data[,1:30]
data[,91:120]=data[,1:30]
data[,121:150]=data[,1:30]
data1=data
tensor1=array(t(data1),dim=c(30,10,50))
plot_slice(tensor1,2,"class","mode",option="viridis",limits=c(0,0.1))
data[,11:20]=data[,1:10]*0.5+data[,21:30]*0.5
data[,31:60]=data[,1:30]
data[,61:90]=data[,1:30]
data[,91:120]=data[,1:30]
data[,121:150]=data[,1:30]
data[,161:170]=data[,151:160]*0.5+data[,171:180]*0.5
data[,181:210]=data[,151:180]
data[,211:240]=data[,151:180]
data[,241:270]=data[,151:180]
data[,271:300]=data[,151:180]
tensor_true=array(t(data),dim=c(30,10,50))
Y_true=as.tensor(tensor_true)
plot_slice(tensor_true,2,"Mode 1","Mode 3",option="viridis",limits=c(0,0.1))
D0=as.tensor(tensor_true)
D3=matrization_tensor(D0,3)
D_true=D0@data
#D0 = A %*% W
Q1=30
Q2=10
M=100
Y3 <- sapply(1:(Q1*Q2), function(i){rmultinom(1, M, D3[,i])})
D3=D3[which(apply(Y3,1, sum) >0 ),]
Y3=Y3[which(apply(Y3,1, sum) >0 ),]
#A3= A3[which(apply(Y3,1, sum) >0 ),]%*% diag(1/apply(A3[which(apply(Y3,1, sum) >0 ),], 2, sum))
vocab =which(apply(Y3,1, sum) >0 )
tensor=tensorization(D3,mode=3,Q1,Q2,length(vocab))
Y=tensorization(Y3,mode=3,Q1,Q2,length(vocab))
tensor=Y@data
#tensor=array(t(datanoise),dim=c(30,10,50))
plot_slice(tensor,2,"mode1","mode2")
Y=as.tensor(tensor)
Y3=matrization_tensor(Y,3) # first 10 is dim2* first from dim 1
write.csv(Y3, file = "Y3.csv", row.names = F)
write.csv(D3, file = "D3.csv", row.names = F)
heatmap_matrix(t(Y3),"Topics","Mode 3")
##nonnegative Tucker decomposition
NTD_result=NTD(Y/M,rank=c(2,2,4),algorithm="KL",nmf.algorithm = "KL")
NTD_A1=t(NTD_result$A$A1)
NTD_A1=NTD_A1/rowSums(NTD_A1)
heatmap_matrix(NTD_A1,"Groups","Mode 1")
NTD_A2=t(NTD_result$A$A2)
NTD_A2=NTD_A2/rowSums(NTD_A2)
heatmap_matrix2(NTD_A2,"Classes","Mode 2")
NTD_A3=t(NTD_result$A$A3)
NTD_A3=NTD_A3/colSums(NTD_A3)
heatmap_matrix(NTD_A3,"Topics","Mode 3")
NTD_G=NTD_result$S
NTD_G_3=matrization_tensor(NTD_G,3)
NTD_G_3=NTD_G_3/colSums(NTD_G_3)
NTD_G=tensorization(NTD_G_3,3,2,2,4)
plot_slice(NTD_G@data,2,"Groups","Topics",TRUE)
###our method
ours_results=score(Y/M,K1=2,K2=2,K3=4,M=M,normalize="Tracy")
heatmap_matrix(ours_results$hatA1,"Groups","Mode 1")
heatmap_matrix2(ours_results$hatA2,"Classes","Mode 2")
heatmap_matrix(ours_results$hatA1,"Groups","Mode 1")
heatmap_matrix(ours_results$hatA3,"Topics","Mode 3")
heatmap_matrix(ours_results$hatA1,"Groups","Mode 1")
heatmap_matrix2(ours_results$hatA2,"Classes","Mode 2")
heatmap_matrix(ours_results$hatA3,"Topics","Mode 3")
plot_slice(ours_results$hatcore@data,2,"Groups","Topics",TRUE)
###our method
ours_results=score(Y/M,K1=2,K2=2,K3=4,M=M,normalize="Ours")
heatmap_matrix(ours_results$hatA1,"Groups","Mode 1")
heatmap_matrix2(ours_results$hatA2,"Classes","Mode 2")
heatmap_matrix(ours_results$hatA3,"Topics","Mode 3")
plot_slice(ours_results$hatcore@data,2,"Groups","Topics",TRUE)
set.seed(2024)
D=t(rdiric(2,rep(0.8,50)))
data=matrix(0,50,300)
data[,1:15]=matrix(rep(D[,1],times=15),nrow=50)
data[,16:30]=matrix(rep(D[,2],times=15),nrow=50)
data[,31:60]=data[,1:30]
data[,61:90]=data[,1:30]
data[,91:120]=data[,1:30]
data[,121:150]=data[,1:30]
data[,151:300]=data[,1:150]
before=rdiric(1,rep(0.8,50))#rdiric(1,rep(0.5,25))*sum(data[1:25,1])
#data[1:25,16:30]=matrix(rep(before2,times=15),nrow=25)
data[,16:30]=matrix(rep(before,times=15),nrow=50)
data[,31:60]=data[,1:30]
data[,61:90]=data[,1:30]
data[,91:120]=data[,1:30]
data[,121:150]=data[,1:30]
data1=data
tensor1=array(t(data1),dim=c(30,10,50))
plot_slice(tensor1,2,"class","mode",option="viridis",limits=c(0,0.1))
data[,11:20]=data[,1:10]*0.5+data[,21:30]*0.5
data[,31:60]=data[,1:30]
data[,61:90]=data[,1:30]
data[,91:120]=data[,1:30]
data[,121:150]=data[,1:30]
data[,161:170]=data[,151:160]*0.5+data[,171:180]*0.5
data[,181:210]=data[,151:180]
data[,211:240]=data[,151:180]
data[,241:270]=data[,151:180]
data[,271:300]=data[,151:180]
tensor_true=array(t(data),dim=c(30,10,50))
Y_true=as.tensor(tensor_true)
plot_slice(tensor_true,2,"Mode 1","Mode 3",option="viridis",limits=c(0,0.1))
D0=as.tensor(tensor_true)
D3=matrization_tensor(D0,3)
D_true=D0@data
#D0 = A %*% W
Q1=30
Q2=10
M=100
Y3 <- sapply(1:(Q1*Q2), function(i){rmultinom(1, M, D3[,i])})
D3=D3[which(apply(Y3,1, sum) >0 ),]
Y3=Y3[which(apply(Y3,1, sum) >0 ),]
#A3= A3[which(apply(Y3,1, sum) >0 ),]%*% diag(1/apply(A3[which(apply(Y3,1, sum) >0 ),], 2, sum))
vocab =which(apply(Y3,1, sum) >0 )
tensor=tensorization(D3,mode=3,Q1,Q2,length(vocab))
Y=tensorization(Y3,mode=3,Q1,Q2,length(vocab))
tensor=Y@data
#tensor=array(t(datanoise),dim=c(30,10,50))
plot_slice(tensor,2,"mode1","mode2")
Y=as.tensor(tensor)
Y3=matrization_tensor(Y,3) # first 10 is dim2* first from dim 1
write.csv(Y3, file = "Y3.csv", row.names = F)
write.csv(D3, file = "D3.csv", row.names = F)
heatmap_matrix(t(Y3),"Topics","Mode 3")
##nonnegative Tucker decomposition
NTD_result=NTD(Y/M,rank=c(2,2,4),algorithm="KL",nmf.algorithm = "KL")
NTD_A1=t(NTD_result$A$A1)
NTD_A1=NTD_A1/rowSums(NTD_A1)
heatmap_matrix(NTD_A1,"Groups","Mode 1")
NTD_A2=t(NTD_result$A$A2)
NTD_A2=NTD_A2/rowSums(NTD_A2)
heatmap_matrix2(NTD_A2,"Classes","Mode 2")
NTD_A3=t(NTD_result$A$A3)
NTD_A3=NTD_A3/colSums(NTD_A3)
heatmap_matrix(NTD_A3,"Topics","Mode 3")
NTD_G=NTD_result$S
NTD_G_3=matrization_tensor(NTD_G,3)
NTD_G_3=NTD_G_3/colSums(NTD_G_3)
NTD_G=tensorization(NTD_G_3,3,2,2,4)
plot_slice(NTD_G@data,2,"Groups","Topics",TRUE)
###our method
ours_results=score(Y/M,K1=2,K2=2,K3=4,M=M,normalize="Ours")
heatmap_matrix(ours_results$hatA1,"Groups","Mode 1")
heatmap_matrix2(ours_results$hatA2,"Classes","Mode 2")
heatmap_matrix(ours_results$hatA1,"Groups","Mode 1")
###our method
ours_results=score(Y/M,K1=2,K2=2,K3=4,M=M,normalize="HOOI")
heatmap_matrix(ours_results$hatA1,"Groups","Mode 1")
set.seed(2024)
D=t(rdiric(2,rep(0.8,50)))
data=matrix(0,50,300)
data[,1:15]=matrix(rep(D[,1],times=15),nrow=50)
data[,16:30]=matrix(rep(D[,2],times=15),nrow=50)
data[,31:60]=data[,1:30]
data[,61:90]=data[,1:30]
data[,91:120]=data[,1:30]
data[,121:150]=data[,1:30]
data[,151:300]=data[,1:150]
before=rdiric(1,rep(0.5,50))#rdiric(1,rep(0.5,25))*sum(data[1:25,1])
#data[1:25,16:30]=matrix(rep(before2,times=15),nrow=25)
data[,16:30]=matrix(rep(before,times=15),nrow=50)
data[,31:60]=data[,1:30]
data[,61:90]=data[,1:30]
data[,91:120]=data[,1:30]
data[,121:150]=data[,1:30]
data1=data
tensor1=array(t(data1),dim=c(30,10,50))
plot_slice(tensor1,2,"class","mode",option="viridis",limits=c(0,0.1))
data[,11:20]=data[,1:10]*0.5+data[,21:30]*0.5
data[,31:60]=data[,1:30]
data[,61:90]=data[,1:30]
data[,91:120]=data[,1:30]
data[,121:150]=data[,1:30]
data[,161:170]=data[,151:160]*0.5+data[,171:180]*0.5
data[,181:210]=data[,151:180]
data[,211:240]=data[,151:180]
data[,241:270]=data[,151:180]
data[,271:300]=data[,151:180]
tensor_true=array(t(data),dim=c(30,10,50))
Y_true=as.tensor(tensor_true)
plot_slice(tensor_true,2,"Mode 1","Mode 3",option="viridis",limits=c(0,0.1))
D0=as.tensor(tensor_true)
D3=matrization_tensor(D0,3)
D_true=D0@data
#D0 = A %*% W
Q1=30
Q2=10
M=100
Y3 <- sapply(1:(Q1*Q2), function(i){rmultinom(1, M, D3[,i])})
D3=D3[which(apply(Y3,1, sum) >0 ),]
Y3=Y3[which(apply(Y3,1, sum) >0 ),]
#A3= A3[which(apply(Y3,1, sum) >0 ),]%*% diag(1/apply(A3[which(apply(Y3,1, sum) >0 ),], 2, sum))
vocab =which(apply(Y3,1, sum) >0 )
tensor=tensorization(D3,mode=3,Q1,Q2,length(vocab))
Y=tensorization(Y3,mode=3,Q1,Q2,length(vocab))
tensor=Y@data
###our method
ours_results=score(Y/M,K1=2,K2=2,K3=4,M=M,normalize="HOOI")
heatmap_matrix(ours_results$hatA1,"Groups","Mode 1")
heatmap_matrix2(ours_results$hatA2,"Classes","Mode 2")
heatmap_matrix(ours_results$hatA3,"Topics","Mode 3")
plot_slice(ours_results$hatcore@data,2,"Groups","Topics",TRUE)
before=rdiric(1,rep(0.9,50))#rdiric(1,rep(0.5,25))*sum(data[1:25,1])
set.seed(2024)
D=t(rdiric(2,rep(0.8,50)))
data=matrix(0,50,300)
data[,1:15]=matrix(rep(D[,1],times=15),nrow=50)
data[,16:30]=matrix(rep(D[,2],times=15),nrow=50)
data[,31:60]=data[,1:30]
data[,61:90]=data[,1:30]
data[,91:120]=data[,1:30]
data[,121:150]=data[,1:30]
data[,151:300]=data[,1:150]
before=rdiric(1,rep(0.9,50))#rdiric(1,rep(0.5,25))*sum(data[1:25,1])
#data[1:25,16:30]=matrix(rep(before2,times=15),nrow=25)
data[,16:30]=matrix(rep(before,times=15),nrow=50)
data[,31:60]=data[,1:30]
data[,61:90]=data[,1:30]
data[,91:120]=data[,1:30]
data[,121:150]=data[,1:30]
data1=data
tensor1=array(t(data1),dim=c(30,10,50))
plot_slice(tensor1,2,"class","mode",option="viridis",limits=c(0,0.1))
data[,11:20]=data[,1:10]*0.5+data[,21:30]*0.5
data[,31:60]=data[,1:30]
data[,61:90]=data[,1:30]
data[,91:120]=data[,1:30]
data[,121:150]=data[,1:30]
data[,161:170]=data[,151:160]*0.5+data[,171:180]*0.5
data[,181:210]=data[,151:180]
data[,211:240]=data[,151:180]
data[,241:270]=data[,151:180]
data[,271:300]=data[,151:180]
tensor_true=array(t(data),dim=c(30,10,50))
Y_true=as.tensor(tensor_true)
plot_slice(tensor_true,2,"Mode 1","Mode 3",option="viridis",limits=c(0,0.1))
D0=as.tensor(tensor_true)
D3=matrization_tensor(D0,3)
D_true=D0@data
#D0 = A %*% W
Q1=30
Q2=10
M=100
Y3 <- sapply(1:(Q1*Q2), function(i){rmultinom(1, M, D3[,i])})
D3=D3[which(apply(Y3,1, sum) >0 ),]
Y3=Y3[which(apply(Y3,1, sum) >0 ),]
#A3= A3[which(apply(Y3,1, sum) >0 ),]%*% diag(1/apply(A3[which(apply(Y3,1, sum) >0 ),], 2, sum))
vocab =which(apply(Y3,1, sum) >0 )
tensor=tensorization(D3,mode=3,Q1,Q2,length(vocab))
Y=tensorization(Y3,mode=3,Q1,Q2,length(vocab))
tensor=Y@data
###our method
ours_results=score(Y/M,K1=2,K2=2,K3=4,M=M,normalize="HOOI")
heatmap_matrix(ours_results$hatA1,"Groups","Mode 1")
heatmap_matrix2(ours_results$hatA2,"Classes","Mode 2")
heatmap_matrix(ours_results$hatA1,"Groups","Mode 1")
heatmap_matrix(ours_results$hatA3,"Topics","Mode 3")
plot_slice(ours_results$hatcore@data,2,"Groups","Topics",TRUE)
###our method
ours_results=score(Y/M,K1=2,K2=2,K3=4,M=M,normalize="Ours")
heatmap_matrix(ours_results$hatA1,"Groups","Mode 1")
heatmap_matrix2(ours_results$hatA2,"Classes","Mode 2")
heatmap_matrix(ours_results$hatA3,"Topics","Mode 3")
heatmap_matrix(ours_results$hatA1,"Groups","Mode 1")
heatmap_matrix2(ours_results$hatA2,"Classes","Mode 2")
heatmap_matrix(ours_results$hatA3,"Topics","Mode 3")
plot_slice(ours_results$hatcore@data,2,"Groups","Topics",TRUE)
##nonnegative Tucker decomposition
NTD_result=NTD(Y/M,rank=c(2,2,4),algorithm="KL")
NTD_A1=t(NTD_result$A$A1)
NTD_A1=NTD_A1/rowSums(NTD_A1)
heatmap_matrix(NTD_A1,"Groups","Mode 1")
NTD_A2=t(NTD_result$A$A2)
NTD_A2=NTD_A2/rowSums(NTD_A2)
heatmap_matrix2(NTD_A2,"Classes","Mode 2")
NTD_A3=t(NTD_result$A$A3)
NTD_A3=NTD_A3/colSums(NTD_A3)
heatmap_matrix(NTD_A3,"Topics","Mode 3")
NTD_G=NTD_result$S
NTD_G_3=matrization_tensor(NTD_G,3)
NTD_G_3=NTD_G_3/colSums(NTD_G_3)
NTD_G=tensorization(NTD_G_3,3,2,2,4)
plot_slice(NTD_G@data,2,"Groups","Topics",TRUE)
hatY=tensor_create(NTD_G,NTD_A1,NTD_A2,NTD_A3)
heatmap_matrix2<- function(matrix_data,xlab,ylab){
# Convert matrix to data frame in long format
df <- as.data.frame(matrix_data) %>%
rownames_to_column("Row") %>%
pivot_longer(cols = -Row, names_to = "Column", values_to = "Value") %>%
mutate(Row = as.numeric(Row), Column = as.numeric(gsub("V", "", Column))) # Convert Row and Column to numeric
# Create heatmap
g=ggplot(df, aes(x = as.factor(Column), y =( Row), fill = Value)) +
geom_tile() +
scale_fill_viridis_c(limits=c(0,1),option="H") +  # Use a color scale that's visually appealing for heatmaps
# scale_fill_viridis_c() +  # Us
labs(x = xlab, y = ylab, fill = "") +
scale_y_continuous(breaks=seq(0,max(as.numeric(df$Row)),by=5))+
theme_minimal() +  # Use a minimal theme
theme(#axis.text.x = element_text(angle = 45, hjust = 1), # Improve x-axis label readability
strip.background = element_rect(fill = "lightblue"), # Customize facet label background
strip.text = element_text(face = "bold"))  # Bold facet labels
print(g)
}
heatmap_matrix<- function(matrix_data,xlab,ylab){
# Convert matrix to data frame in long format
df <- as.data.frame(matrix_data) %>%
rownames_to_column("Row") %>%
pivot_longer(cols = -Row, names_to = "Column", values_to = "Value") %>%
mutate(Row = as.numeric(Row), Column = as.numeric(gsub("V", "", Column))) # Convert Row and Column to numeric
# Create heatmap
g=ggplot(df, aes(x = as.factor(Column), y =( Row), fill = Value)) +
geom_tile() +
scale_fill_viridis_c(limits=c(0,1),option="H") +  # Use a color scale that's visually appealing for heatmaps
# scale_fill_viridis_c() +  # Us
labs(x = xlab, y = ylab, fill = "") +
#scale_y_continuous(breaks=seq(0,max(as.numeric(df$Row)),by=5))+
theme_minimal() +  # Use a minimal theme
theme(#axis.text.x = element_text(angle = 45, hjust = 1), # Improve x-axis label readability
strip.background = element_rect(fill = "red"), # Customize facet label background
strip.text = element_text(face = "bold"))  # Bold facet labels
print(g)
}
heatmap_matrix(ours_results$hatA1,"Groups","Mode 1")
heatmap_matrix2(ours_results$hatA2,"Classes","Mode 2")
heatmap_matrix(ours_results$hatA3,"Topics","Mode 3")
plot_slice(ours_results$hatcore@data,2,"Groups","Topics",TRUE)
?scale_fill_viridis_c()
##nonnegative Tucker decomposition
NTD_result=NTD(Y/M,rank=c(2,2,4),algorithm="KL")
NTD_A1=t(NTD_result$A$A1)
NTD_A1=NTD_A1/rowSums(NTD_A1)
heatmap_matrix(NTD_A1,"Groups","Mode 1")
NTD_A2=t(NTD_result$A$A2)
NTD_A2=NTD_A2/rowSums(NTD_A2)
heatmap_matrix2(NTD_A2,"Classes","Mode 2")
NTD_A3=t(NTD_result$A$A3)
NTD_A3=NTD_A3/colSums(NTD_A3)
heatmap_matrix(NTD_A3,"Topics","Mode 3")
NTD_G=NTD_result$S
NTD_G_3=matrization_tensor(NTD_G,3)
NTD_G_3=NTD_G_3/colSums(NTD_G_3)
NTD_G=tensorization(NTD_G_3,3,2,2,4)
plot_slice(NTD_G@data,2,"Groups","Topics",TRUE)
hatY=tensor_create(NTD_G,NTD_A1,NTD_A2,NTD_A3)
print(l1_error(hatY@data,D0@data))
plot_slice(ours_results$hatcore@data,2,"Groups","Topics",TRUE)
hatY=tensor_create(ours_results$hatcore,ours_results$hatA1,ours_results$hatA2,ours_results$hatA3)
print(l1_error(hatY@data,D0@data))
heatmap_matrix(ours_results$hatA1,"Groups","Mode 1")
heatmap_matrix2(ours_results$hatA2,"Classes","Mode 2")
write.csv(Y3, file = "Y3.csv", row.names = F)
write.csv(D3, file = "D3.csv", row.names = F)
tensor_true=array(t(data),dim=c(30,10,50))
Y_true=as.tensor(tensor_true)
plot_slice(tensor_true,2,"Mode 1","Mode 3",option="viridis",limits=c(0,0.1))
View(Y3)
View(Y)
Y@data[1:30,1,1:50]
Y@data[1,1:10,1:50]
install.packages("C:/Users/建新/Downloads/DirichletReg_0.7-1.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/建新/Downloads/plotly_4.10.4.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/建新/Downloads/rdist_0.0.5.zip", repos = NULL, type = "win.binary")
library(reshape2)
library(reshape)
library(dplyr)
library(reshape2)
library(reshape)
library(dplyr)
mae <- readRDS("C:/Users/建新/Downloads/VMRC-subcommunities-analyses-20230725/results/mae_for_analyses.Rds")
mae <- readRDS("C:/Users/建新/Downloads/VMRC-subcommunities-analyses-20230725/results/mae_for_analyses.Rds")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
install.packages("C:/Users/建新/Downloads/MultiAssayExperiment_1.30.3.zip", repos = NULL, type = "win.binary")
mae <- readRDS("C:/Users/建新/Downloads/VMRC-subcommunities-analyses-20230725/results/mae_for_analyses.Rds")
install.packages("C:/Users/建新/Downloads/SummarizedExperiment_1.34.0.zip", repos = NULL, type = "win.binary")
mae <- readRDS("C:/Users/建新/Downloads/VMRC-subcommunities-analyses-20230725/results/mae_for_analyses.Rds")
